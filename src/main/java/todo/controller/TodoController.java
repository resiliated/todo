package todo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import todo.model.Todo;
import todo.model.Type;
import todo.repository.TodoRepository;
import todo.repository.TypeRepository;

@RestController
@RequestMapping("todo")
public class TodoController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TodoRepository todoRepository;
    @Autowired
    private TypeRepository typeRepository;


    @DeleteMapping(path="/{id}")
    public @ResponseBody void removeTodo(@PathVariable Integer id){
        todoRepository.deleteById(id);
    }

    @PutMapping(path="/{id}")
    public @ResponseBody Todo modifyTodo(@PathVariable Integer id, @RequestBody Todo newtodo){
        return todoRepository.findById(id).map(todo ->{
            //todo.setCreation(newtodo.getCreation());
            todo.setContent(newtodo.getContent());
            //todo.setClose(newtodo.getClose());
            todo.setState(newtodo.getState());
            todo.setType(newtodo.getType());

            return todoRepository.save(todo);
        }).orElseGet(() -> {
            return todoRepository.save(newtodo);
        });
    }

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody Todo addNewTodo (@RequestBody Todo newtodo) {
        if(newtodo.getType().getId() != null){ //Create with an existing type
            Type type = typeRepository.findById(newtodo.getType().getId()).orElseThrow();

            if(!newtodo.getType().getEntitled().equals(type.getEntitled())){
                type.setEntitled(newtodo.getType().getEntitled());
            }
            newtodo.setType(type);
        }
        return todoRepository.save(newtodo);
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Todo getTodo(@PathVariable Integer id){
        return todoRepository.findById(id).orElseThrow(); //TODO make dedicated exception
    }

    @GetMapping
    public @ResponseBody Iterable<Todo> getAllTodos() {
        // This returns a JSON or XML with the users
        return todoRepository.findAll();
    }
}